##Original author: Anibal Santiago @anibals
#
# Copyright(c) 2021 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


# Script to configure the Local SSDs in a VM. Use as the startup script
# Filename: create-local-ssd-stripe-set.ps1
#
# The script will do the following:
# 1) Create a RAID-0 using all the Local SSDs
# 2) Create folders Z:\SQLData and Z:\SQLLog for the Tempdb
# 3) Move the Tempdb database to the Z: drive. Notice that this should only be done once.
#    You can comment that section after the first time the VM has run
# 
# Note: The script assumes that Z: is the drive letter for the Local SSDs. Change it if
#       using a different letter for the Local SSDs


# AllocationUnitSize to format the disk: 64K=65536
$AllocationUnitSize = 65536

### Create a Raid-0 in all available Local SSDs ###
# Create storage pool with all available Local SSDs NVMe
$diskCount = (Get-PhysicalDisk -CanPool $true -FriendlyName 'NVMe*' | Measure-Object).Count;

if ($diskCount -gt 0) {
  New-StoragePool -FriendlyName "LocalSSD" `
    -StorageSubSystemUniqueId (Get-StorageSubSystem).uniqueID `
    -PhysicalDisks (Get-PhysicalDisk -CanPool $true -FriendlyName 'NVMe*');

  # Create a new virtual disk as a stripe set
  New-VirtualDisk -FriendlyName "TempDB" `
    -StoragePoolFriendlyName "LocalSSD" -Interleave 65536 `
    -NumberOfColumns $diskCount  -ProvisioningType Fixed -ResiliencySettingName "Simple" -UseMaximumSize;
  Initialize-Disk -PartitionStyle GPT -VirtualDisk (Get-VirtualDisk -FriendlyName "TempDB");

  # Format the disk and assign letter Z:
  $diskNumber = ((Get-VirtualDisk -FriendlyName "TempDB" | Get-Disk).Number);
  New-Partition -DiskNumber $diskNumber -DriveLetter Z -UseMaximumSize;
  Format-Volume -DriveLetter Z -FileSystem NTFS -AllocationUnitSize $AllocationUnitSize -NewFileSystemLabel "TempDB" -Confirm:$false -Force;
}

## If Z: drive exist, use it for Tempdb. Otherwise we assume the VM does not have Local SSDs.
if (Test-Path "Z:\"){
  ## Create a folder for the TempDB database. Make sure you specify the folder location as configured in SQL Server.
  ## Note: Every time the VM is stop and then restarted, we need to create the Tempdb folder in the LocalSSD as it is not
  ##       recreated automatically.
  if (!(Test-Path "Z:\SQLData")) { New-Item -Path "Z:\SQLData" -ItemType Directory };
  if (!(Test-Path "Z:\SQLLog"))  { New-Item -Path "Z:\SQLLog"  -ItemType Directory };

  ## Move Tempdb to Local SSD. This can be commented after the first run as it is saved in the SQL Server system tables.
  ## NOTE: COMMENT AFTER FIRST RUN OF VM
  sqlcmd -S. -E -Q "ALTER DATABASE tempdb MODIFY FILE (NAME = tempdev, FILENAME = 'Z:\SQLData\tempdev.mdf', SIZE = 1024MB, FILEGROWTH = 1024MB)"
  sqlcmd -S. -E -Q "ALTER DATABASE tempdb MODIFY FILE (NAME = templog, FILENAME = 'Z:\SQLLog\templog.ldf', SIZE = 1024MB, FILEGROWTH = 1024MB)"
  sqlcmd -S. -E -Q "ALTER DATABASE tempdb MODIFY FILE (NAME = temp2, FILENAME = 'Z:\SQLData\temp2.ndf', SIZE = 1024MB, FILEGROWTH = 1024MB)"
  sqlcmd -S. -E -Q "ALTER DATABASE tempdb MODIFY FILE (NAME = temp3, FILENAME = 'Z:\SQLData\temp3.ndf', SIZE = 1024MB, FILEGROWTH = 1024MB)"
  sqlcmd -S. -E -Q "ALTER DATABASE tempdb MODIFY FILE (NAME = temp4, FILENAME = 'Z:\SQLData\temp4.ndf', SIZE = 1024MB, FILEGROWTH = 1024MB)"

  # Stop SQL Server to use the new location of the Tempdb. Can be commented after the first run.
  ## NOTE: COMMENT AFTER FIRST RUN OF VM
  Stop-Service -Force MSSQLSERVER

  # Start SQL Server. Don't uncomment this to make sure SQL Server is always restarted.
  # It may fail to start if Windows starts the service before the Z: is formatted. Alternatively you can change the SQL Server service
  # to start manually and make this command the one that start SQL Server every time.
  Start-Service MSSQLSERVER
}